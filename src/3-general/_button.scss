// Button
//
// @todo
//
// Markup:
// <button class="button">
//   Button
// </button>
// <a class="button">
//   Button
// </a>
// <input type='submit' value="Submit">
// <button class="button secondary">
//   Secondary Button
// </button>
// <button class="button">
//   <span class="ri ri-envelope"></span>
//   <span>Button with icon</span>
// </button>
// <button class="button">
//   <span>Button right with icon</span>
//   <span class="ri ri-arrow-right"></span>
// </button>
// <button class="button">
//   <span class="ri ri-search"></span>
//   <span>Search</span>
// </button>
// <a class="button">
//   <span class="ri ri-arrow-left"></span>
//   <span>Back</span>
// </a>
// <input type='submit' value="Secondary Submit" class="secondary">
//
// Weight: 4
//
// Styleguide: General.Button

$button-border-height: 40px;
$button-border-width: 2px;

@mixin button-base {
  outline: 0;
  display: inline-block;
  position: relative;
  text-align: center;
  border: $button-border-width solid transparent;
  transition: $button-transition;
  font-family: $button-font-family;
  text-transform: $button-text-transform;
  font-size: $button-font-size;
  font-weight: $button-weight;
  border-radius: $button-radius;
  -webkit-appearance: none; // sass-lint:disable-line no-vendor-prefixes
  appearance: none;
  line-height: em($button-border-height - $button-border-width * 2);
  padding: 0 $button-padding;
  height: em($button-border-height);
  cursor: pointer;
  &:hover,
  &:focus{
    box-shadow: $button-shadow-hover;
  }

  // button icon styles
  .ri:first-child {
    margin-right: em(5px);
  }

  .ri:last-child {
    margin-left: em(5px);
  }
}

@mixin button-primary {
  color: $button-color;
  background-color: $button-background;
  &:hover,
  &:focus{
    color: $button-color;
    background-color: $button-background-hover;
  }
}

@mixin button-secondary {
  color: $button-background;
  border-color: $button-background;
  background: $button-color;
  &:hover,
  &:focus{
    color: $button-background-hover;
    border-color: $button-background-hover;
  }
}

/// Expands a button to make it full-width.
/// @param {Boolean} $full [true] - Set to `true` to enable the full width behavior. Set to `false` to reverse this behavior.
@mixin button-width($full: true) {
  @if $full {
    display: block;
    width: 100%;
    margin-right: 0;
    margin-left: 0;
  }
  @else {
    display: inline-block;
    width: auto;
  }
}

/// Adds disabled styles to a button by fading the element, reseting the cursor, and disabling pointer events.
/// @param {Color} $background [$button-background] - Background color of the disabled button.
/// @param {Color} $color [$button-color] - Text color of the disabled button. Set to `auto` to have the mixin automatically generate a color based on the background color.
@mixin button-disabled(
  $background: $button-background,
  $color: $button-color
) {
  @if $color == auto {
    $color: color-pick-contrast($background, ($button-color, $button-color-alt));
  }

  opacity: $button-opacity-disabled;
  cursor: not-allowed;

  &
  &:hover,
  &:focus {
    background-color: $background;
    color: $color;
    box-shadow: none;
  }
}

.button {
  @include button-base;
  @include button-primary;

  &.secondary {
    @include button-secondary;
  }

  // Disabled style
  &.state-disabled,
  &[disabled] {
    @include button-disabled;
  }
}

a.button { // sass-lint:disable-line no-qualifying-elements
  &,
  &:hover,
  &:focus {
    text-decoration: none;
  }
}

// Reset styles on button-like inputs
input[type='submit'],
input[type='button'] {
  @include button-base;
  @include button-primary;

  appearance: none;

  &.secondary {
    @include button-secondary;
  }
}


// Button full width
//
// @todo
//
// Markup:
// <div class="buttons">
//   <button class="button full">
//     <span>Category</span>
//     <span class="ri ri-chevron-up"></span>
//   </button>
//   <button class="button full">
//     <span>Category</span>
//     <span class="ri ri-cross"></span>
//   </button>
// </div>
//
// Styleguide: General.Button.FullWidth

.button.full,
.buttons .button.full {
  display: flex;
  width: 100%;
  justify-content: space-between;
}

// Button icon only
//
// @todo
//
// Markup:
// <button class="button-icon">
//   <span class="ri ri-arrow-left"></span>
// </button>
// <button class="button-icon">
//   <span class="ri ri-arrow-right"></span>
// </button>
// <button class="button-icon">
//   <span class="ri ri-chevron-down"></span>
// </button>
//
// Styleguide: General.Button.Icon

.button-icon {
  @include button-secondary;
  outline: 0;
  display: inline-block;
  text-align: center;
  vertical-align: middle;
  border: 2px solid;
  transition: $button-transition;
  font-family: $button-font-family;
  text-transform: $button-text-transform;
  font-size: $button-font-size;
  font-weight: $button-weight;
  border-radius: $button-radius;
  -webkit-appearance: none; // sass-lint:disable-line no-vendor-prefixes
  line-height: em($button-border-height - $button-border-width * 2);

  height: em($button-border-height);
  width: em($button-border-height);
  cursor: pointer;
  &:hover,
  &:focus{
    box-shadow: $button-shadow-hover;
  }

  &.state-disabled,
  &[disabled] {
    @include button-disabled;
  }

  .ri {
    line-height: 1;
    height: em(38);
    display: inline-block;
  }
}

// Buttons Group
//
// @todo
//
// Markup:
// <div class="buttons">
//   <button class="button">
//     Button
//   </button>
//   <button class="button">
//     Button
//   </button>
//   <button class="button">
//     Button
//   </button>
// </div>
// <div class="buttons sm-direction-vertical">
//   <button class="button">
//     Button
//   </button>
//   <button class="button">
//     Button
//   </button>
//   <button class="button">
//     Button
//   </button>
// </div>
// <div class="buttons sm-align-right">
//   <button class="button">
//     Button
//   </button>
//   <button class="button">
//     Button
//   </button>
//   <button class="button">
//     Button
//   </button>
// </div>
//
// Styleguide: General.Button.ButtonsGroup

$buttons-gap: 10px !default;
$buttons-justify: (
  'left': start,
  'right': end,
  'center': center,
  'justify': space-between,
  'spaced': space-around,
);

$buttons-alignment: (
  'top': start,
  'bottom': end,
  'middle': center,
  'stretch': stretch,
);

.buttons {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  padding: 0;
  margin: 0 -$buttons-gap;
  clear: both;
  width: calc(100% + #{$buttons-gap * 2});
  &:first-child{
    margin-top: -$buttons-gap;
  }
  &:last-child{
    margin-bottom: -$buttons-gap;
  }
  li{
    display: inline-block;
    padding: 0;
    margin: 0;
  }
  a,
  .button{
    margin: 0;
    display: block;
  }
  & > select,
  & > input{
    width: auto;
    margin: $buttons-gap;
  }
  & > li,
  & > a,
  & > .button{
    margin: $buttons-gap;
  }

  @each $breakpoint in $breakpoint-classes {
    @include breakpoint($breakpoint) {
      @each $name, $value in $buttons-justify {
        @include selector(
          $prefix: '&',
          $breakpoint: $breakpoint,
          $label: 'align',
          $value: $name
        ){
          justify-content: $value
        }
      }

      @each $name, $value in $buttons-alignment {
        @include selector(
          $prefix: '&',
          $breakpoint: $breakpoint,
          $label: 'align',
          $value: $name
        ){
          align-items: $value;
        }
      }

      @include selector(
        $prefix: '&',
        $breakpoint: $breakpoint,
        $label: 'direction',
        $value: 'vertical'
      ){
        flex-direction: column;
      }

      @include selector(
        $prefix: '&',
        $breakpoint: $breakpoint,
        $label: 'direction',
        $value: 'horizontal'
      ){
        flex-direction: row;
      }
    }
  }
}
